import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

df=pd.read_csv("../input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.head()

df.info()

df['Churn'].value_counts()

import matplotlib.pyplot as plt
import seaborn as sns 
import numpy as np

cols = ['gender','SeniorCitizen',"Partner","Dependents"]
numerical = cols

plt.figure(figsize=(20,4))

for i, col in enumerate(numerical):
    ax = plt.subplot(1, len(numerical), i+1)
    sns.countplot(x=str(col), data=df)
    ax.set_title(f"{col}")
    
sns.boxplot(x='Churn', y='MonthlyCharges', data=df)

cols=['InternetService','TechSupport','OnlineBackup','Contract']
plt.figure(figsize=(14,4))

for i,col in enumerate(cols):
    ax=plt.subplot(1,len(cols),i+1)
    sns.countplot(x='Churn',hue=str(col),data=df)
    ax.set_title(f"{col}")

df['TotalCharges']=df['TotalCharges'].apply(lambda x:pd.to_numeric(x,errors='coerce')).dropna()
df['TotalCharges']
cat_features=df.drop(['customerID','TotalCharges','MonthlyCharges','SeniorCitizen','tenure'],axis=1)
cat_features.head()

from sklearn import preprocessing
df_cat=cat_features.apply(preprocessing.LabelEncoder().fit_transform)
df_cat.head()

num_features=df[['customerID','TotalCharges','MonthlyCharges','SeniorCitizen','tenure']]
finaldf=pd.merge(num_features,df_cat,left_index=True,right_index=True)
finaldf.head()

from sklearn.model_selection import train_test_split
finaldf=finaldf.dropna()
finaldf=finaldf.drop(['customerID'],axis=1)

X=finaldf.drop(['Churn'],axis=1)
y=finaldf['Churn']
X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.33,random_state=42)

y_train.value_counts()

from imblearn.over_sampling import SMOTE
oversample=SMOTE(k_neighbors=5)
X_smote,y_smote=oversample.fit_resample(X_train,y_train)
X_train,y_train=X_smote,y_smote
y_train.value_counts()

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier(random_state=46)
rf.fit(X_train,y_train)

from sklearn.metrics import accuracy_score
pred=rf.predict(X_test)
print(accuracy_score(pred,y_test)*100)
